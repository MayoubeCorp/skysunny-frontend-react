// src/web/CompletePayment.jsx
import { useEffect, useMemo, useState } from 'react';
import infoIcon from "../img/home/payment.png";
import '../styles/main.scss';

// Í∏àÏï° Ìè¨Îß∑
const toMoney = (v) => {
    const n = Number(String(v ?? '').replace(/[^\d.-]/g, ''));
    return Number.isFinite(n) ? `${n.toLocaleString()}Ïõê` : (v ?? '-');
};

// passTypeÎ≥Ñ ÌëúÏãúÎ™Ö Îß§Ìïë
const getPassTypeDisplayName = (passType) => {
    switch (passType) {
        case 'cash': return 'Ï∫êÏãúÏ†ïÍ∏∞Í∂å';
        case 'free': return 'Í∏∞Í∞ÑÏ†ïÍ∏∞Í∂å(ÏûêÏú†ÏÑù)';
        case 'fix': return 'Í∏∞Í∞ÑÏ†ïÍ∏∞Í∂å(Í≥†Ï†ïÏÑù)';
        case '1day': return '1Ïùº Ïù¥Ïö©Í∂å';
        case 'locker': return 'ÏÇ¨Î¨ºÌï®';
        case 'studyroom': return 'Ïä§ÌÑ∞ÎîîÎ£∏';
        default: return passType || 'Ïù¥Ïö©Í∂å';
    }
};

// passTypeÎ≥Ñ ÌëúÏãúÌï† ÌïÑÎìúÎì§ÏùÑ Î∞òÌôòÌïòÎäî Ìï®Ïàò
const getDisplayFields = (passType) => {
    const commonFields = [
        { key: 'storeName', label: 'Îß§Ïû•Î™Ö' },
        { key: 'passType', label: 'Ïù¥Ïö©Í∂å' },
        { key: 'productInfo', label: 'ÏÉÅÌíàÏ†ïÎ≥¥' },
        { key: 'paymentAmount', label: 'Ïù¥Ïö©Í∏àÏï°', isMoney: true },
        { key: 'validDays', label: 'Ïù¥Ïö©Í∏∞Í∞Ñ' }
    ];

    const separator = { type: 'separator' };

    let additionalFields = [];

    switch (passType) {
        case 'cash':
            additionalFields = [
                { key: 'usageInfo', label: 'Ïù¥Ïö©Ï†ïÎ≥¥' },
                { key: 'orderNumber', label: 'Ï£ºÎ¨∏Î≤àÌò∏' },
                { key: 'paidAt', label: 'Í≤∞Ï†úÏùºÏãú' },
                { key: 'paymentAmount', label: 'Í≤∞Ï†úÍ∏àÏï°', isMoney: true }
            ];
            break;
        case 'free':
            additionalFields = [
                { key: 'usageInfo', label: 'Ïù¥Ïö©Ï†ïÎ≥¥' },
                { key: 'oneDayInfo', label: '1Ïùº Ïù¥Ïö©Ï†ïÎ≥¥' },
                { key: 'orderNumber', label: 'Ï£ºÎ¨∏Î≤àÌò∏' },
                { key: 'paidAt', label: 'Í≤∞Ï†úÏùºÏãú' },
                { key: 'paymentAmount', label: 'Í≤∞Ï†úÍ∏àÏï°', isMoney: true }
            ];
            break;
        case 'fix':
        case '1day':
            additionalFields = [
                { key: 'usageInfo', label: 'Ïù¥Ïö©Ï†ïÎ≥¥' },
                { key: 'orderNumber', label: 'Ï£ºÎ¨∏Î≤àÌò∏' },
                { key: 'paidAt', label: 'Í≤∞Ï†úÏùºÏãú' },
                { key: 'paymentAmount', label: 'Í≤∞Ï†úÍ∏àÏï°', isMoney: true }
            ];
            break;
        case 'locker':
        case 'studyroom':
            additionalFields = [
                { key: 'orderNumber', label: 'Ï£ºÎ¨∏Î≤àÌò∏' },
                { key: 'paidAt', label: 'Í≤∞Ï†úÏùºÏãú' },
                { key: 'paymentAmount', label: 'Í≤∞Ï†úÍ∏àÏï°', isMoney: true }
            ];
            break;
        default:
            // Í∏∞Î≥∏Í∞í: Î™®Îì† ÌïÑÎìú ÌëúÏãú
            additionalFields = [
                { key: 'usageInfo', label: 'Ïù¥Ïö©Ï†ïÎ≥¥' },
                { key: 'expireText', label: 'ÎßåÎ£åÍπåÏßÄ' },
                { key: 'remainingInfo', label: 'ÏûîÏó¨Ï†ïÎ≥¥' },
                { key: 'oneDayInfo', label: '1Ïùº Ïù¥Ïö©Ï†ïÎ≥¥' },
                { key: 'orderNumber', label: 'Ï£ºÎ¨∏Î≤àÌò∏' },
                { key: 'paidAt', label: 'Í≤∞Ï†úÏùºÏãú' },
                { key: 'paymentAmount', label: 'Í≤∞Ï†úÍ∏àÏï°', isMoney: true }
            ];
    }

    return [...commonFields, separator, ...additionalFields];
};

// URLÏóêÏÑú orderNumber Ï∂îÏ∂ú
const getOrderNumberFromQuery = () => {
    if (typeof window === 'undefined') return null;
    const q = new URLSearchParams(window.location.search);

    // ÌÜ†Ïä§ Í≤∞Ï†ú ÏÑ±Í≥µ ÌõÑ Î¶¨Îã§Ïù¥Î†âÌä∏ÏóêÏÑú Ïò§Îäî ÌååÎùºÎØ∏ÌÑ∞Îì§ÏùÑ ÌôïÏù∏
    // orderId (ÌÜ†Ïä§ ÌëúÏ§Ä), orderNumber (Ïª§Ïä§ÌÖÄ), paymentKey, amount Îì±
    const orderNumber = q.get('orderNumber') || q.get('orderId') || q.get('order_id') || q.get('paymentKey');

    console.log('[CompletePayment] URL parameters:', {
        orderNumber: q.get('orderNumber'),
        orderId: q.get('orderId'),
        order_id: q.get('order_id'),
        paymentKey: q.get('paymentKey'),
        amount: q.get('amount'),
        allParams: Object.fromEntries(q.entries())
    });

    return orderNumber;
};

export default function CompletePayment() {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [errMsg, setErrMsg] = useState('');

    // 1) orderNumber Í≤∞Ï†ï (URL Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ Îã§ÏñëÌïú ÏÜåÏä§ÏóêÏÑú ÏãúÎèÑ)
    const orderNumber = useMemo(() => {
        console.log('[CompletePayment] orderNumber Ï∂îÏ∂ú ÏãúÏûë...');

        const fromQuery = getOrderNumberFromQuery();
        if (fromQuery) {
            console.log('[CompletePayment] ‚úÖ orderNumber from query:', fromQuery);
            return fromQuery;
        }

        // sessionStorageÏóêÏÑú toss:draft ÌôïÏù∏ (CheckPaymentÏóêÏÑú Ï†ÄÏû•)
        let fromSessionDraft = null;
        try {
            const draftStr = typeof window !== 'undefined' ? sessionStorage.getItem('toss:draft') : null;
            console.log('[CompletePayment] sessionStorage draft string:', draftStr);
            if (draftStr) {
                const draft = JSON.parse(draftStr);
                fromSessionDraft = draft?.orderNumber || draft?.data?.orderNumber || null;
                console.log('[CompletePayment] ‚úÖ orderNumber from sessionStorage draft:', fromSessionDraft);
            }
        } catch (e) {
            console.warn('[CompletePayment] sessionStorage draft parse error:', e);
        }

        if (fromSessionDraft) return fromSessionDraft;

        const SK = (typeof window !== 'undefined' && window.SKYSUNNY) || {};
        const fromSK = SK?.orderNumber || SK?.lastOrderNumber || SK?.order?.id || null;

        console.log('[CompletePayment] window.SKYSUNNY:', SK);
        console.log('[CompletePayment] orderNumber from SKYSUNNY:', fromSK);

        // localStorageÏóê Ï†ÄÏû•Îêú orderNumberÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
        const fromStorage = typeof window !== 'undefined' ? localStorage.getItem('lastOrderNumber') : null;
        console.log('[CompletePayment] orderNumber from localStorage:', fromStorage);

        const finalOrderNumber = fromSK || fromStorage || null;
        console.log('[CompletePayment] üéØ ÏµúÏ¢Ö orderNumber:', finalOrderNumber);

        return finalOrderNumber;
    }, []);

    // 2) RNÏóêÏÑú Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞ Î∞õÍ∏∞
    useEffect(() => {
        let mounted = true;

        const load = async () => {
            console.log('[CompletePayment] RNÏóêÏÑú Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞Î•º Î∞õÎäî Ï§ë...');

            // RNÏóêÏÑú Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞Î•º Î∞õÍ∏∞ ÏúÑÌïú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
            const handlePaymentComplete = (event) => {
                try {
                    const paymentData = event.detail || event.data || event;
                    console.log('[CompletePayment] RNÏóêÏÑú Î∞õÏùÄ Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞:', paymentData);

                    if (paymentData && paymentData.orderNumber) {
                        setData(paymentData);
                        setLoading(false);
                    } else {
                        console.warn('[CompletePayment] Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§:', paymentData);
                        setErrMsg('Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏßÄ Î™ªÌñàÏäµÎãàÎã§.');
                        setLoading(false);
                    }
                } catch (error) {
                    console.error('[CompletePayment] Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ïò§Î•ò:', error);
                    setErrMsg('Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
                    setLoading(false);
                }
            };

            // Îã§ÏñëÌïú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
            document.addEventListener('payment:complete', handlePaymentComplete);
            document.addEventListener('skysunny:payment:complete', handlePaymentComplete);
            window.addEventListener('message', (event) => {
                if (event.data && event.data.type === 'PAYMENT_COMPLETE') {
                    handlePaymentComplete(event);
                }
            });

            // RN Î∏åÎ¶¨ÏßÄ ÏΩúÎ∞± Îì±Î°ù
            if (typeof window.__askRN === 'function') {
                window.__askRN('REQUEST_PAYMENT_COMPLETE', { orderNumber });
            }

            // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï (10Ï¥à ÌõÑ ÏóêÎü¨ Ï≤òÎ¶¨)
            const timeout = setTimeout(() => {
                if (mounted) {
                    console.warn('[CompletePayment] Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÌÉÄÏûÑÏïÑÏõÉ');
                    setErrMsg('Í≤∞Ï†ú ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞Î•º Î∞õÎäî Îç∞ ÏãúÍ∞ÑÏù¥ Ïò§Îûò Í±∏Î¶¨Í≥† ÏûàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
                    setLoading(false);
                }
            }, 10000);

            return () => {
                document.removeEventListener('payment:complete', handlePaymentComplete);
                document.removeEventListener('skysunny:payment:complete', handlePaymentComplete);
                clearTimeout(timeout);
            };
        };

        load();
        return () => { mounted = false; };
    }, [orderNumber]);

    // 3) Ìôà ÌÉ≠ÏúºÎ°ú Ïù¥Îèô (RN Î∏åÎ¶¨ÏßÄ ‚Üí Ïõπ Ìè¥Î∞±)
    const goHome = () => {
        try {
            const payload = { action: 'GO_HOME', tab: 'Ìôà' };
            if (typeof window !== 'undefined' && typeof window.__askRN === 'function') {
                window.__askRN(payload.action, { tab: payload.tab });
                return;
            }
            if (typeof window !== 'undefined' &&
                window.ReactNativeWebView &&
                typeof window.ReactNativeWebView.postMessage === 'function') {
                window.ReactNativeWebView.postMessage(JSON.stringify(payload));
                return;
            }
            // Ïõπ Ìè¥Î∞±: Î£®Ìä∏Î°ú Ïù¥Îèô
            if (typeof window !== 'undefined') {
                window.location.replace(`${window.location.origin}/`);
            }
        } catch (e) {
            console.log('[CompletePayment] goHome error', e);
        }
    };

    // 4) ÏûÖÏû•ÌïòÍ∏∞ ‚Üí Í∞ôÏùÄ ÎèÑÎ©îÏù∏Ïùò /qr-codeÎ°ú Ïù¥Îèô (ÌëúÏãúÏö© Ï†ïÎ≥¥ ÏøºÎ¶¨Î°ú Ï†ÑÎã¨)
    const goQr = () => {
        if (typeof window === 'undefined' || !data) return;
        const p = new URLSearchParams({
            orderNumber: String(data.orderNumber || orderNumber || ''),
            storeName: data.storeName || '',
            passType: data.passType || '',
            description: data.productInfo || '',
            amount: String(data.paymentAmount ?? ''),
            paidAt: data.paidAt || '',
            address: '', // Ï£ºÏÜåÍ∞Ä ÌïÑÏöîÌïòÎ©¥ window.SKYSUNNY.address Îì±ÏúºÎ°ú Ï±ÑÏõå ÎÑ£ÏúºÏÑ∏Ïöî
        });
        const base = window.location.origin;
        window.location.assign(`${base}/qr-code?${p.toString()}`);
    };

    // 5) Î°úÎî©/ÏóêÎü¨ UI
    if (loading) {
        return (
            <div className="complete-container">
                <img src={infoIcon} alt="payment" className="payment-img" />
                <div className="notice-box">
                    <span className="notice-text font-bm">Í≤∞Ï†ú Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§...</span>
                </div>
            </div>
        );
    }
    if (errMsg) {
        return (
            <div className="complete-container">
                <img src={infoIcon} alt="payment" className="payment-img" />
                <div className="notice-box">
                    <span className="notice-text font-bm">{errMsg}</span>
                </div>
                <div className="bottom-bar">
                    <button className="bottom-btn" onClick={goHome}>Îã´Í∏∞</button>
                </div>
            </div>
        );
    }

    // 6) Ï†ïÏÉÅ Î†åÎçî
    return (
        <div className="complete-container">
            {/* Ïù¥ÎØ∏ÏßÄ */}
            <img src={infoIcon} alt="payment" className="payment-img" />

            {/* Í≤∞Ï†ú ÏôÑÎ£å ÏïàÎÇ¥ */}
            <div className="notice-box">
                <span className="notice-text font-bm">Í≤∞Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.</span>
            </div>

            {/* Ï†ïÎ≥¥ Ïπ¥Îìú */}
            <div className="info-card">
                {getDisplayFields(data.passType).map((field, index) => {
                    if (field.type === 'separator') {
                        return <div key={index} className="line"></div>;
                    }

                    const value = data[field.key];
                    const displayValue = field.isMoney ? toMoney(value) : (value || '-');

                    // passType ÌïÑÎìúÏù∏ Í≤ΩÏö∞ ÌëúÏãúÎ™ÖÏúºÎ°ú Î≥ÄÌôò
                    const finalValue = field.key === 'passType' ? getPassTypeDisplayName(value) : displayValue;

                    return (
                        <div key={index} className="info-row">
                            <span className="title">{field.label}</span>
                            <span className="text">{finalValue}</span>
                        </div>
                    );
                })}

                {/* Ïø†Ìè∞Ìï†Ïù∏ÏùÄ Î™®Îì† passTypeÏóêÏÑú ÌëúÏãú (Í∞íÏù¥ ÏûàÏùÑ ÎïåÎßå) */}
                {!!data.couponAmount && (
                    <div className="info-row">
                        <span className="title">Ïø†Ìè∞Ìï†Ïù∏</span>
                        <span className="text">-{toMoney(data.couponAmount)}</span>
                    </div>
                )}
            </div>

            {/* ÏûÖÏû•ÌïòÍ∏∞ */}
            <div className="enter-btn-box">
                <button className="enter-btn" onClick={goQr}>ÏûÖÏû•ÌïòÍ∏∞</button>
            </div>

            {/* Îã´Í∏∞ ‚Üí HomeTab Ïù¥Îèô */}
            <div className="bottom-bar">
                <button className="bottom-btn" onClick={goHome}>Îã´Í∏∞</button>
            </div>
        </div>
    );
}
